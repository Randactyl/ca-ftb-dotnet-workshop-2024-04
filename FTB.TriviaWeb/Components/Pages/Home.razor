@page "/"
@rendermode InteractiveServer

@inject OpenTriviaService OpenTriviaService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Trivia Game</h1>

<p>Make selections and then press start game to play.</p>
<p>@errorMessage</p>

<div class="form-group">
    <select @bind="this.selectedCategory">
        <option value="">Select a category</option>
        @foreach (TriviaCategory category in this.categories.TriviaCategories.OrderBy(s => s.Name))
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>
</div>
<div class="form-group">
    <select @bind="this.selectedDifficulty">
        <option value="">Select a difficulty</option>
        <option value="easy">Easy</option>
        <option value="medium">Medium</option>
        <option value="hard">Hard</option>
    </select>
</div>
<div class="form-group">
    <select @bind="this.selectedGameType">
        <option value="">Select a game type</option>
        <option value="multiple">Multiple Choice</option>
        <option value="boolean">True/False</option>
    </select>
</div>

<button class="btn btn-primary" @onclick="this.StartGame">Start Game</button>
<button class="btn btn-primary" @onclick="this.GoToScores">View Scores</button>

@* @if (this.categories.TriviaCategories.Any())
{
    <ul>
        @foreach (TriviaCategory category in this.categories.TriviaCategories.OrderBy(s => s.Name))
        {
            <li>@category.Name (@category.Id)</li>
        }
    </ul>
} *@

@code {
    private string? selectedCategory;
    private string? selectedDifficulty;
    private string? selectedGameType;
    private CategoryModel categories = new();
    private string? token;
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.token = await this.LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(this.token))
            {
                this.token = await this.OpenTriviaService.GetToken();
                await this.LocalStorage.SetItemAsync("token", this.token);
            }

            var storedCategories = await this.LocalStorage.GetItemAsync<CategoryModel>("categories");
            if (storedCategories is null)
            {
                this.categories = await this.OpenTriviaService.GetCategories();

                await this.LocalStorage.SetItemAsync("categories", this.categories);
            }
            else
            {
                this.categories = storedCategories;
            }
        }

        this.StateHasChanged();
    }
    private async Task StartGame()
    {
        var badGameSettings = await this.LocalStorage.GetItemAsync<List<GameSettingsModel>>("badGameSettings");

        if (badGameSettings != null && badGameSettings.Any(s => s.Category == this.selectedCategory && s.Difficulty == this.selectedDifficulty && s.GameType == this.selectedGameType))
        {
            this.errorMessage = "This game doesn't have any questions. Please select a different category, difficulty, and/or game type.";
            return;
        }

        if (string.IsNullOrEmpty(selectedGameType) || string.IsNullOrEmpty(selectedCategory) || string.IsNullOrEmpty(selectedDifficulty))
        {
            this.errorMessage = "Please select a category, difficulty, and game type.";
            return;
        }
        this.errorMessage = string.Empty;

        this.NavigationManager.NavigateTo($"/game/{this.selectedCategory}/{this.selectedDifficulty}/{this.selectedGameType}");
    }
    private void GoToScores()
    {
        this.NavigationManager.NavigateTo("/scoreboard");
    }
}
