@page "/vote"

@inject HttpClient Http

<PageTitle>Vote</PageTitle>

<h3>Vote</h3>

@if (this.votes.Any() && this.currentVote != null)
{
    <div class="form-group">
        <!-- display two images side by side -->
        <div class="row">
            <div class="col-md-6">
                <img src="@(this.currentVote?.Car1Image)" alt="@(this.currentVote?.Car1Name) Car Image"/>
                <button class="btn btn-primary" @onclick="() => this.VoteForCar(this.currentVote?.Car1Name)">Vote for @(this.currentVote?.Car1Name)</button>
            </div>
            <div class="col-md-6">
                <img src="@(this.currentVote?.Car2Image)" alt="@(this.currentVote?.Car2Name) Car Image"/>
                <button class="btn btn-primary" @onclick="() => this.VoteForCar(this.currentVote?.Car2Name)">Vote for @(this.currentVote?.Car2Name)</button>
            </div>
        </div>
    </div>
}
else
{
    <p>No votes available.</p>
    <p>
        <button class="btn btn-primary" @onclick="this.AddAutomobile">Add Another Automobile</button>
        <button class="btn btn-danger" @onclick="this.ResetVotes">Reset All Votes</button>
    </p>
}

@code {
    List<VoteViewModel> votes = [];
    VoteViewModel? currentVote;

    protected override async Task OnInitializedAsync()
    {
        await this.GetNewVotes();
    }

    private async Task GetNewVotes()
    {
        HttpResponseMessage response = await this.Http.PostAsync("GetVotes", null);
        this.votes = await response.Content.ReadFromJsonAsync<List<VoteViewModel>>() ?? [];
        this.votes.Shuffle();
        Random random = new();
        foreach (VoteViewModel voteViewModel in this.votes)
        {
            bool randomBool = random.Next(2) == 0;
            if (!randomBool)
            {
                continue;
            }

            (voteViewModel.Car2Name, voteViewModel.Car1Name) = (voteViewModel.Car1Name, voteViewModel.Car2Name);
            (voteViewModel.Car2Image, voteViewModel.Car1Image) = (voteViewModel.Car1Image, voteViewModel.Car2Image);
        }

        this.currentVote = this.votes.FirstOrDefault();
    }

    private async Task AddAutomobile()
    {
        _ = await this.Http.PostAsync("GetNewAutomobile", null);
        await this.GetNewVotes();
    }

    private async Task ResetVotes()
    {
        _ = await this.Http.DeleteAsync("ResetVotes");
        await this.GetNewVotes();
    }

    private async Task VoteForCar(string? carName)
    {
        if (string.IsNullOrEmpty(carName))
        {
            return;
        }

        if (this.currentVote == null)
        {
            return;
        }

        if (this.currentVote.Car1Name != carName && this.currentVote.Car2Name != carName)
        {
            return;
        }

        _ = await this.Http.PutAsync($"SubmitVote/{this.currentVote.Id}/{carName}", null);
        this.votes.RemoveAll(s => s.Id == this.currentVote.Id);
        this.currentVote = this.votes.FirstOrDefault();
        if (this.currentVote is null)
        {
            await this.GetNewVotes();
        }
    }
}
